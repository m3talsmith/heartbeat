// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/heartbeat.proto

package heartbeat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeartbeatClient is the client API for Heartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeartbeatClient interface {
	Monitor(ctx context.Context, opts ...grpc.CallOption) (Heartbeat_MonitorClient, error)
}

type heartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewHeartbeatClient(cc grpc.ClientConnInterface) HeartbeatClient {
	return &heartbeatClient{cc}
}

func (c *heartbeatClient) Monitor(ctx context.Context, opts ...grpc.CallOption) (Heartbeat_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Heartbeat_ServiceDesc.Streams[0], "/heartbeat.Heartbeat/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartbeatMonitorClient{stream}
	return x, nil
}

type Heartbeat_MonitorClient interface {
	Send(*Beat) error
	CloseAndRecv() (*MonitorReply, error)
	grpc.ClientStream
}

type heartbeatMonitorClient struct {
	grpc.ClientStream
}

func (x *heartbeatMonitorClient) Send(m *Beat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *heartbeatMonitorClient) CloseAndRecv() (*MonitorReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MonitorReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartbeatServer is the server API for Heartbeat service.
// All implementations must embed UnimplementedHeartbeatServer
// for forward compatibility
type HeartbeatServer interface {
	Monitor(Heartbeat_MonitorServer) error
	mustEmbedUnimplementedHeartbeatServer()
}

// UnimplementedHeartbeatServer must be embedded to have forward compatible implementations.
type UnimplementedHeartbeatServer struct {
}

func (UnimplementedHeartbeatServer) Monitor(Heartbeat_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedHeartbeatServer) mustEmbedUnimplementedHeartbeatServer() {}

// UnsafeHeartbeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeartbeatServer will
// result in compilation errors.
type UnsafeHeartbeatServer interface {
	mustEmbedUnimplementedHeartbeatServer()
}

func RegisterHeartbeatServer(s grpc.ServiceRegistrar, srv HeartbeatServer) {
	s.RegisterService(&Heartbeat_ServiceDesc, srv)
}

func _Heartbeat_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HeartbeatServer).Monitor(&heartbeatMonitorServer{stream})
}

type Heartbeat_MonitorServer interface {
	SendAndClose(*MonitorReply) error
	Recv() (*Beat, error)
	grpc.ServerStream
}

type heartbeatMonitorServer struct {
	grpc.ServerStream
}

func (x *heartbeatMonitorServer) SendAndClose(m *MonitorReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *heartbeatMonitorServer) Recv() (*Beat, error) {
	m := new(Beat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Heartbeat_ServiceDesc is the grpc.ServiceDesc for Heartbeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Heartbeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.Heartbeat",
	HandlerType: (*HeartbeatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _Heartbeat_Monitor_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/heartbeat.proto",
}
